test1 -


void sigint_handler(int signum)
{
  printf(1, "SIGINT received\n");
}

void sigusr_handler(int signum)
{
  printf(1, "SIGUSR1 received\n");
}

int main(int argc, char *argv[])
{
  // register signal handlers
  signal(SIGINT, sigint_handler);
  signal(SIGUSR1, sigusr_handler);

  printf(1, "Sending SIGUSR1 to process %d\n", getpid());
  sigkill(getpid(), SIGUSR1);

  printf(1, "Sending SIGINT to process %d\n", getpid());
  sigkill(getpid(), SIGINT);

  exit();
}




test2 -


void sigint_handler(int signum)
{
  printf(1, "SIGINT received\n");
}

int main(int argc, char *argv[])
{
  // register signal handler for SIGINT
  signal(SIGINT, sigint_handler);

  printf(1, "Blocking SIGINT...\n");

  sigprocmask(SIG_BLOCK, SIGINT);

  printf(1, "Entering critical section...\n");
  int i;
  for (i = 0; i < 1000000000; i++)
    ;

  printf(1, "Unblocking SIGINT...\n");
  sigprocmask(SIG_UNBLOCK,SIGINT);

  printf(1, "Sleeping for 5 seconds...\n");
  sleep(5);

  exit();
}


test3 -

void
handler(int signum)
{
  printf(1, "Signal %d received\n", signum);
}

int
main(int argc, char *argv[])
{
  int pid;

  signal(SIGSTOP, handler);
  signal(SIGCONT, handler);

  pid = fork();
  if (pid == 0) {
    // child process
    printf(1, "Child process started\n");
    while (1) {
      printf(1, "Child process running\n");
      sleep(100);
    }
  } else {
    // parent process
    printf(1, "Parent process started\n");
    sleep(1000);
    printf(1, "Sending SIGSTOP to child process\n");
    sigkill(pid, SIGSTOP);
    sleep(1000);
    printf(1, "Sending SIGCONT to child process\n");
    sigkill(pid, SIGCONT);
    sleep(1000);
    printf(1, "Terminating child process\n");
    sigkill(pid, SIGKILL);
    wait();
  }

  exit();
}



test4 - calling system call inside signal handler

#include "types.h"
#include "user.h"
#include "signal.h"

void sigint_handler1(int signum){
  int a=2;
  printf(1, "SIGINT received  : %d\n" , getpid()+a);
}

void sigint_handler2(int signum){
  printf(1, "SIGTERM received\n");
}

int main(int argc, char *argv[]){
  signal(SIGINT, sigint_handler1);
  printf(1, "Sending SIGINT to process %d\n", getpid());
  //signal(SIGINT, SIG_IGN);
  sigkill(getpid(), SIGINT);
  signal(SIGTERM, sigint_handler2);
  printf(1, "Sending SIGTERM to process %d\n", getpid());
  signal(SIGTERM, SIG_DFL);
  sigkill(getpid(), SIGTERM);
  printf(1, "Process exiting...\n");
  exit();
}


test5 - sigstop and sigcont


void child_proc(void){
    printf(1, "Child process is running...\n");

    while(1){
        sleep(1000);
    }
}

int main(int argc, char *argv[]){
    int pid = fork();

    if (pid == 0){
        child_proc();
    }
    else if (pid > 0){
        printf(1, "Pausing child process...\n");
        sigkill(pid, SIGSTOP);

        printf(1, "\nResuming child process...\n");
        sigkill(pid, SIGCONT);
    }
    else {
        printf(1, "Failed to fork a child process!\n");
        exit();
    }

    exit();
}


test6 - checking sigpause , sigstop , sigcont


void child_proc(void){
    printf(1, "Child process is running...\n");
    while(1){
        sigpause();
    }
}

int main(int argc, char *argv[]){
    int pid = fork();
    if (pid == 0){
        child_proc();
    }
    else if (pid > 0){
        printf(1, "Pausing child process...\n");
        sigkill(pid, SIGSTOP);
        printf(1, "Resuming child process...\n");
        sigkill(pid, SIGCONT);
    }
    else{
        printf(1, "Failed to fork a child process!\n");
        exit();
    }
    exit();
}


